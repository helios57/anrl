#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AnrlDB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AnrlDB")]
	public partial class AnrlDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertt_Daten(t_Daten instance);
    partial void Updatet_Daten(t_Daten instance);
    partial void Deletet_Daten(t_Daten instance);
    partial void Insertt_Tracker(t_Tracker instance);
    partial void Updatet_Tracker(t_Tracker instance);
    partial void Deletet_Tracker(t_Tracker instance);
    partial void Insertt_GPS_IN(t_GPS_IN instance);
    partial void Updatet_GPS_IN(t_GPS_IN instance);
    partial void Deletet_GPS_IN(t_GPS_IN instance);
    partial void Insertt_Log(t_Log instance);
    partial void Updatet_Log(t_Log instance);
    partial void Deletet_Log(t_Log instance);
    partial void Insertt_Map(t_Map instance);
    partial void Updatet_Map(t_Map instance);
    partial void Deletet_Map(t_Map instance);
    partial void Insertt_PenaltyZone(t_PenaltyZone instance);
    partial void Updatet_PenaltyZone(t_PenaltyZone instance);
    partial void Deletet_PenaltyZone(t_PenaltyZone instance);
    partial void Insertt_PenaltyZonePoint(t_PenaltyZonePoint instance);
    partial void Updatet_PenaltyZonePoint(t_PenaltyZonePoint instance);
    partial void Deletet_PenaltyZonePoint(t_PenaltyZonePoint instance);
    partial void Insertt_PenaltyZonePolygon(t_PenaltyZonePolygon instance);
    partial void Updatet_PenaltyZonePolygon(t_PenaltyZonePolygon instance);
    partial void Deletet_PenaltyZonePolygon(t_PenaltyZonePolygon instance);
    partial void Insertt_Picture(t_Picture instance);
    partial void Updatet_Picture(t_Picture instance);
    partial void Deletet_Picture(t_Picture instance);
    partial void Insertt_Pilot(t_Pilot instance);
    partial void Updatet_Pilot(t_Pilot instance);
    partial void Deletet_Pilot(t_Pilot instance);
    partial void Insertt_Race(t_Race instance);
    partial void Updatet_Race(t_Race instance);
    partial void Deletet_Race(t_Race instance);
    partial void Insertt_Race_Team(t_Race_Team instance);
    partial void Updatet_Race_Team(t_Race_Team instance);
    partial void Deletet_Race_Team(t_Race_Team instance);
    partial void Insertt_Team(t_Team instance);
    partial void Updatet_Team(t_Team instance);
    partial void Deletet_Team(t_Team instance);
    #endregion
		
		public AnrlDataContext() : 
				base(global::AnrlDB.Properties.Settings.Default.AnrlDBConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public AnrlDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AnrlDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AnrlDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AnrlDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<t_Daten> t_Datens
		{
			get
			{
				return this.GetTable<t_Daten>();
			}
		}
		
		public System.Data.Linq.Table<t_Tracker> t_Trackers
		{
			get
			{
				return this.GetTable<t_Tracker>();
			}
		}
		
		public System.Data.Linq.Table<t_GPS_IN> t_GPS_INs
		{
			get
			{
				return this.GetTable<t_GPS_IN>();
			}
		}
		
		public System.Data.Linq.Table<t_Log> t_Logs
		{
			get
			{
				return this.GetTable<t_Log>();
			}
		}
		
		public System.Data.Linq.Table<t_Map> t_Maps
		{
			get
			{
				return this.GetTable<t_Map>();
			}
		}
		
		public System.Data.Linq.Table<t_PenaltyZone> t_PenaltyZones
		{
			get
			{
				return this.GetTable<t_PenaltyZone>();
			}
		}
		
		public System.Data.Linq.Table<t_PenaltyZonePoint> t_PenaltyZonePoints
		{
			get
			{
				return this.GetTable<t_PenaltyZonePoint>();
			}
		}
		
		public System.Data.Linq.Table<t_PenaltyZonePolygon> t_PenaltyZonePolygons
		{
			get
			{
				return this.GetTable<t_PenaltyZonePolygon>();
			}
		}
		
		public System.Data.Linq.Table<t_Picture> t_Pictures
		{
			get
			{
				return this.GetTable<t_Picture>();
			}
		}
		
		public System.Data.Linq.Table<t_Pilot> t_Pilots
		{
			get
			{
				return this.GetTable<t_Pilot>();
			}
		}
		
		public System.Data.Linq.Table<t_Race> t_Races
		{
			get
			{
				return this.GetTable<t_Race>();
			}
		}
		
		public System.Data.Linq.Table<t_Race_Team> t_Race_Teams
		{
			get
			{
				return this.GetTable<t_Race_Team>();
			}
		}
		
		public System.Data.Linq.Table<t_Team> t_Teams
		{
			get
			{
				return this.GetTable<t_Team>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.t_Daten")]
	public partial class t_Daten : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ID_Tracker;
		
		private System.DateTime _Timestamp;
		
		private decimal _Longitude;
		
		private decimal _Latitude;
		
		private decimal _Altitude;
		
		private decimal _Speed;
		
		private int _Penalty;
		
		private int _ID_Polygon;
		
		private EntityRef<t_Tracker> _t_Tracker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnID_TrackerChanging(int value);
    partial void OnID_TrackerChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnLongitudeChanging(decimal value);
    partial void OnLongitudeChanged();
    partial void OnLatitudeChanging(decimal value);
    partial void OnLatitudeChanged();
    partial void OnAltitudeChanging(decimal value);
    partial void OnAltitudeChanged();
    partial void OnSpeedChanging(decimal value);
    partial void OnSpeedChanged();
    partial void OnPenaltyChanging(int value);
    partial void OnPenaltyChanged();
    partial void OnID_PolygonChanging(int value);
    partial void OnID_PolygonChanged();
    #endregion
		
		public t_Daten()
		{
			this._t_Tracker = default(EntityRef<t_Tracker>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Tracker", DbType="Int NOT NULL")]
		public int ID_Tracker
		{
			get
			{
				return this._ID_Tracker;
			}
			set
			{
				if ((this._ID_Tracker != value))
				{
					if (this._t_Tracker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_TrackerChanging(value);
					this.SendPropertyChanging();
					this._ID_Tracker = value;
					this.SendPropertyChanged("ID_Tracker");
					this.OnID_TrackerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="Decimal(24,18) NOT NULL")]
		public decimal Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="Decimal(24,18) NOT NULL")]
		public decimal Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Altitude", DbType="Decimal(24,18) NOT NULL")]
		public decimal Altitude
		{
			get
			{
				return this._Altitude;
			}
			set
			{
				if ((this._Altitude != value))
				{
					this.OnAltitudeChanging(value);
					this.SendPropertyChanging();
					this._Altitude = value;
					this.SendPropertyChanged("Altitude");
					this.OnAltitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Speed", DbType="Decimal(24,18) NOT NULL")]
		public decimal Speed
		{
			get
			{
				return this._Speed;
			}
			set
			{
				if ((this._Speed != value))
				{
					this.OnSpeedChanging(value);
					this.SendPropertyChanging();
					this._Speed = value;
					this.SendPropertyChanged("Speed");
					this.OnSpeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Penalty", DbType="Int NOT NULL")]
		public int Penalty
		{
			get
			{
				return this._Penalty;
			}
			set
			{
				if ((this._Penalty != value))
				{
					this.OnPenaltyChanging(value);
					this.SendPropertyChanging();
					this._Penalty = value;
					this.SendPropertyChanged("Penalty");
					this.OnPenaltyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Polygon", DbType="Int NOT NULL")]
		public int ID_Polygon
		{
			get
			{
				return this._ID_Polygon;
			}
			set
			{
				if ((this._ID_Polygon != value))
				{
					this.OnID_PolygonChanging(value);
					this.SendPropertyChanging();
					this._ID_Polygon = value;
					this.SendPropertyChanged("ID_Polygon");
					this.OnID_PolygonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="t_Tracker_t_Daten", Storage="_t_Tracker", ThisKey="ID_Tracker", OtherKey="ID", IsForeignKey=true)]
		public t_Tracker t_Tracker
		{
			get
			{
				return this._t_Tracker.Entity;
			}
			set
			{
				t_Tracker previousValue = this._t_Tracker.Entity;
				if (((previousValue != value) 
							|| (this._t_Tracker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._t_Tracker.Entity = null;
						previousValue.t_Datens.Remove(this);
					}
					this._t_Tracker.Entity = value;
					if ((value != null))
					{
						value.t_Datens.Add(this);
						this._ID_Tracker = value.ID;
					}
					else
					{
						this._ID_Tracker = default(int);
					}
					this.SendPropertyChanged("t_Tracker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.t_Tracker")]
	public partial class t_Tracker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _IMEI;
		
		private string _Name;
		
		private EntitySet<t_Daten> _t_Datens;
		
		private EntitySet<t_Team> _t_Teams;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIMEIChanging(string value);
    partial void OnIMEIChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public t_Tracker()
		{
			this._t_Datens = new EntitySet<t_Daten>(new Action<t_Daten>(this.attach_t_Datens), new Action<t_Daten>(this.detach_t_Datens));
			this._t_Teams = new EntitySet<t_Team>(new Action<t_Team>(this.attach_t_Teams), new Action<t_Team>(this.detach_t_Teams));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IMEI", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string IMEI
		{
			get
			{
				return this._IMEI;
			}
			set
			{
				if ((this._IMEI != value))
				{
					this.OnIMEIChanging(value);
					this.SendPropertyChanging();
					this._IMEI = value;
					this.SendPropertyChanged("IMEI");
					this.OnIMEIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="t_Tracker_t_Daten", Storage="_t_Datens", ThisKey="ID", OtherKey="ID_Tracker")]
		public EntitySet<t_Daten> t_Datens
		{
			get
			{
				return this._t_Datens;
			}
			set
			{
				this._t_Datens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="t_Tracker_t_Team", Storage="_t_Teams", ThisKey="ID", OtherKey="ID_Tracker")]
		public EntitySet<t_Team> t_Teams
		{
			get
			{
				return this._t_Teams;
			}
			set
			{
				this._t_Teams.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_t_Datens(t_Daten entity)
		{
			this.SendPropertyChanging();
			entity.t_Tracker = this;
		}
		
		private void detach_t_Datens(t_Daten entity)
		{
			this.SendPropertyChanging();
			entity.t_Tracker = null;
		}
		
		private void attach_t_Teams(t_Team entity)
		{
			this.SendPropertyChanging();
			entity.t_Tracker = this;
		}
		
		private void detach_t_Teams(t_Team entity)
		{
			this.SendPropertyChanging();
			entity.t_Tracker = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.t_GPS_IN")]
	public partial class t_GPS_IN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _IMEI;
		
		private int _Status;
		
		private int _GPS_fix;
		
		private System.DateTime _TimestampTracker;
		
		private string _longitude;
		
		private string _latitude;
		
		private string _altitude;
		
		private string _speed;
		
		private string _heading;
		
		private int _nr_used_sat;
		
		private string _HDOP;
		
		private System.DateTime _Timestamp;
		
		private bool _Processed;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIMEIChanging(string value);
    partial void OnIMEIChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnGPS_fixChanging(int value);
    partial void OnGPS_fixChanged();
    partial void OnTimestampTrackerChanging(System.DateTime value);
    partial void OnTimestampTrackerChanged();
    partial void OnlongitudeChanging(string value);
    partial void OnlongitudeChanged();
    partial void OnlatitudeChanging(string value);
    partial void OnlatitudeChanged();
    partial void OnaltitudeChanging(string value);
    partial void OnaltitudeChanged();
    partial void OnspeedChanging(string value);
    partial void OnspeedChanged();
    partial void OnheadingChanging(string value);
    partial void OnheadingChanged();
    partial void Onnr_used_satChanging(int value);
    partial void Onnr_used_satChanged();
    partial void OnHDOPChanging(string value);
    partial void OnHDOPChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnProcessedChanging(bool value);
    partial void OnProcessedChanged();
    #endregion
		
		public t_GPS_IN()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IMEI", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string IMEI
		{
			get
			{
				return this._IMEI;
			}
			set
			{
				if ((this._IMEI != value))
				{
					this.OnIMEIChanging(value);
					this.SendPropertyChanging();
					this._IMEI = value;
					this.SendPropertyChanged("IMEI");
					this.OnIMEIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GPS_fix", DbType="Int NOT NULL")]
		public int GPS_fix
		{
			get
			{
				return this._GPS_fix;
			}
			set
			{
				if ((this._GPS_fix != value))
				{
					this.OnGPS_fixChanging(value);
					this.SendPropertyChanging();
					this._GPS_fix = value;
					this.SendPropertyChanged("GPS_fix");
					this.OnGPS_fixChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimestampTracker", DbType="DateTime NOT NULL")]
		public System.DateTime TimestampTracker
		{
			get
			{
				return this._TimestampTracker;
			}
			set
			{
				if ((this._TimestampTracker != value))
				{
					this.OnTimestampTrackerChanging(value);
					this.SendPropertyChanging();
					this._TimestampTracker = value;
					this.SendPropertyChanged("TimestampTracker");
					this.OnTimestampTrackerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="NChar(12) NOT NULL", CanBeNull=false)]
		public string longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="NChar(12) NOT NULL", CanBeNull=false)]
		public string latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_altitude", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string altitude
		{
			get
			{
				return this._altitude;
			}
			set
			{
				if ((this._altitude != value))
				{
					this.OnaltitudeChanging(value);
					this.SendPropertyChanging();
					this._altitude = value;
					this.SendPropertyChanged("altitude");
					this.OnaltitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_speed", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string speed
		{
			get
			{
				return this._speed;
			}
			set
			{
				if ((this._speed != value))
				{
					this.OnspeedChanging(value);
					this.SendPropertyChanging();
					this._speed = value;
					this.SendPropertyChanged("speed");
					this.OnspeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_heading", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string heading
		{
			get
			{
				return this._heading;
			}
			set
			{
				if ((this._heading != value))
				{
					this.OnheadingChanging(value);
					this.SendPropertyChanging();
					this._heading = value;
					this.SendPropertyChanged("heading");
					this.OnheadingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nr_used_sat", DbType="Int NOT NULL")]
		public int nr_used_sat
		{
			get
			{
				return this._nr_used_sat;
			}
			set
			{
				if ((this._nr_used_sat != value))
				{
					this.Onnr_used_satChanging(value);
					this.SendPropertyChanging();
					this._nr_used_sat = value;
					this.SendPropertyChanged("nr_used_sat");
					this.Onnr_used_satChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HDOP", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string HDOP
		{
			get
			{
				return this._HDOP;
			}
			set
			{
				if ((this._HDOP != value))
				{
					this.OnHDOPChanging(value);
					this.SendPropertyChanging();
					this._HDOP = value;
					this.SendPropertyChanged("HDOP");
					this.OnHDOPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Processed", DbType="Bit NOT NULL")]
		public bool Processed
		{
			get
			{
				return this._Processed;
			}
			set
			{
				if ((this._Processed != value))
				{
					this.OnProcessedChanging(value);
					this.SendPropertyChanging();
					this._Processed = value;
					this.SendPropertyChanged("Processed");
					this.OnProcessedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.t_Log")]
	public partial class t_Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.DateTime _timestamp;
		
		private int _level;
		
		private string _project;
		
		private string _Text;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntimestampChanging(System.DateTime value);
    partial void OntimestampChanged();
    partial void OnlevelChanging(int value);
    partial void OnlevelChanged();
    partial void OnprojectChanging(string value);
    partial void OnprojectChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public t_Log()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				if ((this._timestamp != value))
				{
					this.OntimestampChanging(value);
					this.SendPropertyChanging();
					this._timestamp = value;
					this.SendPropertyChanged("timestamp");
					this.OntimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[level]", Storage="_level", DbType="Int NOT NULL")]
		public int level
		{
			get
			{
				return this._level;
			}
			set
			{
				if ((this._level != value))
				{
					this.OnlevelChanging(value);
					this.SendPropertyChanging();
					this._level = value;
					this.SendPropertyChanged("level");
					this.OnlevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_project", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string project
		{
			get
			{
				return this._project;
			}
			set
			{
				if ((this._project != value))
				{
					this.OnprojectChanging(value);
					this.SendPropertyChanging();
					this._project = value;
					this.SendPropertyChanged("project");
					this.OnprojectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.t_Map")]
	public partial class t_Map : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ID_Picture;
		
		private string _Name;
		
		private decimal _XSize;
		
		private decimal _YSize;
		
		private decimal _XRot;
		
		private decimal _YRot;
		
		private decimal _XTopLeft;
		
		private decimal _YTopLeft;
		
		private EntityRef<t_Picture> _t_Picture;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnID_PictureChanging(int value);
    partial void OnID_PictureChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnXSizeChanging(decimal value);
    partial void OnXSizeChanged();
    partial void OnYSizeChanging(decimal value);
    partial void OnYSizeChanged();
    partial void OnXRotChanging(decimal value);
    partial void OnXRotChanged();
    partial void OnYRotChanging(decimal value);
    partial void OnYRotChanged();
    partial void OnXTopLeftChanging(decimal value);
    partial void OnXTopLeftChanged();
    partial void OnYTopLeftChanging(decimal value);
    partial void OnYTopLeftChanged();
    #endregion
		
		public t_Map()
		{
			this._t_Picture = default(EntityRef<t_Picture>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Picture", DbType="Int NOT NULL")]
		public int ID_Picture
		{
			get
			{
				return this._ID_Picture;
			}
			set
			{
				if ((this._ID_Picture != value))
				{
					if (this._t_Picture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_PictureChanging(value);
					this.SendPropertyChanging();
					this._ID_Picture = value;
					this.SendPropertyChanged("ID_Picture");
					this.OnID_PictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XSize", DbType="Decimal(24,18) NOT NULL")]
		public decimal XSize
		{
			get
			{
				return this._XSize;
			}
			set
			{
				if ((this._XSize != value))
				{
					this.OnXSizeChanging(value);
					this.SendPropertyChanging();
					this._XSize = value;
					this.SendPropertyChanged("XSize");
					this.OnXSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YSize", DbType="Decimal(24,18) NOT NULL")]
		public decimal YSize
		{
			get
			{
				return this._YSize;
			}
			set
			{
				if ((this._YSize != value))
				{
					this.OnYSizeChanging(value);
					this.SendPropertyChanging();
					this._YSize = value;
					this.SendPropertyChanged("YSize");
					this.OnYSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XRot", DbType="Decimal(24,18) NOT NULL")]
		public decimal XRot
		{
			get
			{
				return this._XRot;
			}
			set
			{
				if ((this._XRot != value))
				{
					this.OnXRotChanging(value);
					this.SendPropertyChanging();
					this._XRot = value;
					this.SendPropertyChanged("XRot");
					this.OnXRotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YRot", DbType="Decimal(24,18) NOT NULL")]
		public decimal YRot
		{
			get
			{
				return this._YRot;
			}
			set
			{
				if ((this._YRot != value))
				{
					this.OnYRotChanging(value);
					this.SendPropertyChanging();
					this._YRot = value;
					this.SendPropertyChanged("YRot");
					this.OnYRotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XTopLeft", DbType="Decimal(24,18) NOT NULL")]
		public decimal XTopLeft
		{
			get
			{
				return this._XTopLeft;
			}
			set
			{
				if ((this._XTopLeft != value))
				{
					this.OnXTopLeftChanging(value);
					this.SendPropertyChanging();
					this._XTopLeft = value;
					this.SendPropertyChanged("XTopLeft");
					this.OnXTopLeftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YTopLeft", DbType="Decimal(24,18) NOT NULL")]
		public decimal YTopLeft
		{
			get
			{
				return this._YTopLeft;
			}
			set
			{
				if ((this._YTopLeft != value))
				{
					this.OnYTopLeftChanging(value);
					this.SendPropertyChanging();
					this._YTopLeft = value;
					this.SendPropertyChanged("YTopLeft");
					this.OnYTopLeftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="t_Picture_t_Map", Storage="_t_Picture", ThisKey="ID_Picture", OtherKey="ID", IsForeignKey=true)]
		public t_Picture t_Picture
		{
			get
			{
				return this._t_Picture.Entity;
			}
			set
			{
				t_Picture previousValue = this._t_Picture.Entity;
				if (((previousValue != value) 
							|| (this._t_Picture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._t_Picture.Entity = null;
						previousValue.t_Maps.Remove(this);
					}
					this._t_Picture.Entity = value;
					if ((value != null))
					{
						value.t_Maps.Add(this);
						this._ID_Picture = value.ID;
					}
					else
					{
						this._ID_Picture = default(int);
					}
					this.SendPropertyChanged("t_Picture");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.t_PenaltyZone")]
	public partial class t_PenaltyZone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<t_PenaltyZonePolygon> _t_PenaltyZonePolygons;
		
		private EntitySet<t_Race> _t_Races;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public t_PenaltyZone()
		{
			this._t_PenaltyZonePolygons = new EntitySet<t_PenaltyZonePolygon>(new Action<t_PenaltyZonePolygon>(this.attach_t_PenaltyZonePolygons), new Action<t_PenaltyZonePolygon>(this.detach_t_PenaltyZonePolygons));
			this._t_Races = new EntitySet<t_Race>(new Action<t_Race>(this.attach_t_Races), new Action<t_Race>(this.detach_t_Races));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="t_PenaltyZone_t_PenaltyZonePolygon", Storage="_t_PenaltyZonePolygons", ThisKey="ID", OtherKey="ID_PolygonGroup")]
		public EntitySet<t_PenaltyZonePolygon> t_PenaltyZonePolygons
		{
			get
			{
				return this._t_PenaltyZonePolygons;
			}
			set
			{
				this._t_PenaltyZonePolygons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="t_PenaltyZone_t_Race", Storage="_t_Races", ThisKey="ID", OtherKey="ID_PenaltyZone")]
		public EntitySet<t_Race> t_Races
		{
			get
			{
				return this._t_Races;
			}
			set
			{
				this._t_Races.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_t_PenaltyZonePolygons(t_PenaltyZonePolygon entity)
		{
			this.SendPropertyChanging();
			entity.t_PenaltyZone = this;
		}
		
		private void detach_t_PenaltyZonePolygons(t_PenaltyZonePolygon entity)
		{
			this.SendPropertyChanging();
			entity.t_PenaltyZone = null;
		}
		
		private void attach_t_Races(t_Race entity)
		{
			this.SendPropertyChanging();
			entity.t_PenaltyZone = this;
		}
		
		private void detach_t_Races(t_Race entity)
		{
			this.SendPropertyChanging();
			entity.t_PenaltyZone = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.t_PenaltyZonePoint")]
	public partial class t_PenaltyZonePoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private decimal _longitude;
		
		private decimal _latitude;
		
		private decimal _altitude;
		
		private int _ID_Polygon;
		
		private EntityRef<t_PenaltyZonePolygon> _t_PenaltyZonePolygon;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnlongitudeChanging(decimal value);
    partial void OnlongitudeChanged();
    partial void OnlatitudeChanging(decimal value);
    partial void OnlatitudeChanged();
    partial void OnaltitudeChanging(decimal value);
    partial void OnaltitudeChanged();
    partial void OnID_PolygonChanging(int value);
    partial void OnID_PolygonChanged();
    #endregion
		
		public t_PenaltyZonePoint()
		{
			this._t_PenaltyZonePolygon = default(EntityRef<t_PenaltyZonePolygon>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="Decimal(24,14) NOT NULL")]
		public decimal longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="Decimal(24,14) NOT NULL")]
		public decimal latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_altitude", DbType="Decimal(24,14) NOT NULL")]
		public decimal altitude
		{
			get
			{
				return this._altitude;
			}
			set
			{
				if ((this._altitude != value))
				{
					this.OnaltitudeChanging(value);
					this.SendPropertyChanging();
					this._altitude = value;
					this.SendPropertyChanged("altitude");
					this.OnaltitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Polygon", DbType="Int NOT NULL")]
		public int ID_Polygon
		{
			get
			{
				return this._ID_Polygon;
			}
			set
			{
				if ((this._ID_Polygon != value))
				{
					if (this._t_PenaltyZonePolygon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_PolygonChanging(value);
					this.SendPropertyChanging();
					this._ID_Polygon = value;
					this.SendPropertyChanged("ID_Polygon");
					this.OnID_PolygonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="t_PenaltyZonePolygon_t_PenaltyZonePoint", Storage="_t_PenaltyZonePolygon", ThisKey="ID_Polygon", OtherKey="ID", IsForeignKey=true)]
		public t_PenaltyZonePolygon t_PenaltyZonePolygon
		{
			get
			{
				return this._t_PenaltyZonePolygon.Entity;
			}
			set
			{
				t_PenaltyZonePolygon previousValue = this._t_PenaltyZonePolygon.Entity;
				if (((previousValue != value) 
							|| (this._t_PenaltyZonePolygon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._t_PenaltyZonePolygon.Entity = null;
						previousValue.t_PenaltyZonePoints.Remove(this);
					}
					this._t_PenaltyZonePolygon.Entity = value;
					if ((value != null))
					{
						value.t_PenaltyZonePoints.Add(this);
						this._ID_Polygon = value.ID;
					}
					else
					{
						this._ID_Polygon = default(int);
					}
					this.SendPropertyChanged("t_PenaltyZonePolygon");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.t_PenaltyZonePolygon")]
	public partial class t_PenaltyZonePolygon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ID_PolygonGroup;
		
		private int _Type;
		
		private EntitySet<t_PenaltyZonePoint> _t_PenaltyZonePoints;
		
		private EntityRef<t_PenaltyZone> _t_PenaltyZone;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnID_PolygonGroupChanging(int value);
    partial void OnID_PolygonGroupChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    #endregion
		
		public t_PenaltyZonePolygon()
		{
			this._t_PenaltyZonePoints = new EntitySet<t_PenaltyZonePoint>(new Action<t_PenaltyZonePoint>(this.attach_t_PenaltyZonePoints), new Action<t_PenaltyZonePoint>(this.detach_t_PenaltyZonePoints));
			this._t_PenaltyZone = default(EntityRef<t_PenaltyZone>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_PolygonGroup", DbType="Int NOT NULL")]
		public int ID_PolygonGroup
		{
			get
			{
				return this._ID_PolygonGroup;
			}
			set
			{
				if ((this._ID_PolygonGroup != value))
				{
					if (this._t_PenaltyZone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_PolygonGroupChanging(value);
					this.SendPropertyChanging();
					this._ID_PolygonGroup = value;
					this.SendPropertyChanged("ID_PolygonGroup");
					this.OnID_PolygonGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="t_PenaltyZonePolygon_t_PenaltyZonePoint", Storage="_t_PenaltyZonePoints", ThisKey="ID", OtherKey="ID_Polygon")]
		public EntitySet<t_PenaltyZonePoint> t_PenaltyZonePoints
		{
			get
			{
				return this._t_PenaltyZonePoints;
			}
			set
			{
				this._t_PenaltyZonePoints.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="t_PenaltyZone_t_PenaltyZonePolygon", Storage="_t_PenaltyZone", ThisKey="ID_PolygonGroup", OtherKey="ID", IsForeignKey=true)]
		public t_PenaltyZone t_PenaltyZone
		{
			get
			{
				return this._t_PenaltyZone.Entity;
			}
			set
			{
				t_PenaltyZone previousValue = this._t_PenaltyZone.Entity;
				if (((previousValue != value) 
							|| (this._t_PenaltyZone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._t_PenaltyZone.Entity = null;
						previousValue.t_PenaltyZonePolygons.Remove(this);
					}
					this._t_PenaltyZone.Entity = value;
					if ((value != null))
					{
						value.t_PenaltyZonePolygons.Add(this);
						this._ID_PolygonGroup = value.ID;
					}
					else
					{
						this._ID_PolygonGroup = default(int);
					}
					this.SendPropertyChanged("t_PenaltyZone");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_t_PenaltyZonePoints(t_PenaltyZonePoint entity)
		{
			this.SendPropertyChanging();
			entity.t_PenaltyZonePolygon = this;
		}
		
		private void detach_t_PenaltyZonePoints(t_PenaltyZonePoint entity)
		{
			this.SendPropertyChanging();
			entity.t_PenaltyZonePolygon = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.t_Picture")]
	public partial class t_Picture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Data.Linq.Binary _Data;
		
		private string _Name;
		
		private bool _isFlag;
		
		private EntitySet<t_Map> _t_Maps;
		
		private EntitySet<t_Pilot> _t_Pilots;
		
		private EntitySet<t_Team> _t_Teams;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDataChanging(System.Data.Linq.Binary value);
    partial void OnDataChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnisFlagChanging(bool value);
    partial void OnisFlagChanged();
    #endregion
		
		public t_Picture()
		{
			this._t_Maps = new EntitySet<t_Map>(new Action<t_Map>(this.attach_t_Maps), new Action<t_Map>(this.detach_t_Maps));
			this._t_Pilots = new EntitySet<t_Pilot>(new Action<t_Pilot>(this.attach_t_Pilots), new Action<t_Pilot>(this.detach_t_Pilots));
			this._t_Teams = new EntitySet<t_Team>(new Action<t_Team>(this.attach_t_Teams), new Action<t_Team>(this.detach_t_Teams));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isFlag", DbType="Bit NOT NULL")]
		public bool isFlag
		{
			get
			{
				return this._isFlag;
			}
			set
			{
				if ((this._isFlag != value))
				{
					this.OnisFlagChanging(value);
					this.SendPropertyChanging();
					this._isFlag = value;
					this.SendPropertyChanged("isFlag");
					this.OnisFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="t_Picture_t_Map", Storage="_t_Maps", ThisKey="ID", OtherKey="ID_Picture")]
		public EntitySet<t_Map> t_Maps
		{
			get
			{
				return this._t_Maps;
			}
			set
			{
				this._t_Maps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="t_Picture_t_Pilot", Storage="_t_Pilots", ThisKey="ID", OtherKey="ID_Picture")]
		public EntitySet<t_Pilot> t_Pilots
		{
			get
			{
				return this._t_Pilots;
			}
			set
			{
				this._t_Pilots.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="t_Picture_t_Team", Storage="_t_Teams", ThisKey="ID", OtherKey="ID_Flag")]
		public EntitySet<t_Team> t_Teams
		{
			get
			{
				return this._t_Teams;
			}
			set
			{
				this._t_Teams.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_t_Maps(t_Map entity)
		{
			this.SendPropertyChanging();
			entity.t_Picture = this;
		}
		
		private void detach_t_Maps(t_Map entity)
		{
			this.SendPropertyChanging();
			entity.t_Picture = null;
		}
		
		private void attach_t_Pilots(t_Pilot entity)
		{
			this.SendPropertyChanging();
			entity.t_Picture = this;
		}
		
		private void detach_t_Pilots(t_Pilot entity)
		{
			this.SendPropertyChanging();
			entity.t_Picture = null;
		}
		
		private void attach_t_Teams(t_Team entity)
		{
			this.SendPropertyChanging();
			entity.t_Picture = this;
		}
		
		private void detach_t_Teams(t_Team entity)
		{
			this.SendPropertyChanging();
			entity.t_Picture = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.t_Pilot")]
	public partial class t_Pilot : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _LastName;
		
		private string _SureName;
		
		private System.Nullable<int> _ID_Picture;
		
		private EntitySet<t_Team> _t_Teams;
		
		private EntitySet<t_Team> _t_Teams1;
		
		private EntityRef<t_Picture> _t_Picture;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnSureNameChanging(string value);
    partial void OnSureNameChanged();
    partial void OnID_PictureChanging(System.Nullable<int> value);
    partial void OnID_PictureChanged();
    #endregion
		
		public t_Pilot()
		{
			this._t_Teams = new EntitySet<t_Team>(new Action<t_Team>(this.attach_t_Teams), new Action<t_Team>(this.detach_t_Teams));
			this._t_Teams1 = new EntitySet<t_Team>(new Action<t_Team>(this.attach_t_Teams1), new Action<t_Team>(this.detach_t_Teams1));
			this._t_Picture = default(EntityRef<t_Picture>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SureName", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string SureName
		{
			get
			{
				return this._SureName;
			}
			set
			{
				if ((this._SureName != value))
				{
					this.OnSureNameChanging(value);
					this.SendPropertyChanging();
					this._SureName = value;
					this.SendPropertyChanged("SureName");
					this.OnSureNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Picture", DbType="Int")]
		public System.Nullable<int> ID_Picture
		{
			get
			{
				return this._ID_Picture;
			}
			set
			{
				if ((this._ID_Picture != value))
				{
					if (this._t_Picture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_PictureChanging(value);
					this.SendPropertyChanging();
					this._ID_Picture = value;
					this.SendPropertyChanged("ID_Picture");
					this.OnID_PictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="t_Pilot_t_Team", Storage="_t_Teams", ThisKey="ID", OtherKey="ID_Pilot")]
		public EntitySet<t_Team> t_Teams
		{
			get
			{
				return this._t_Teams;
			}
			set
			{
				this._t_Teams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="t_Pilot_t_Team1", Storage="_t_Teams1", ThisKey="ID", OtherKey="ID_Navigator")]
		public EntitySet<t_Team> t_Teams1
		{
			get
			{
				return this._t_Teams1;
			}
			set
			{
				this._t_Teams1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="t_Picture_t_Pilot", Storage="_t_Picture", ThisKey="ID_Picture", OtherKey="ID", IsForeignKey=true)]
		public t_Picture t_Picture
		{
			get
			{
				return this._t_Picture.Entity;
			}
			set
			{
				t_Picture previousValue = this._t_Picture.Entity;
				if (((previousValue != value) 
							|| (this._t_Picture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._t_Picture.Entity = null;
						previousValue.t_Pilots.Remove(this);
					}
					this._t_Picture.Entity = value;
					if ((value != null))
					{
						value.t_Pilots.Add(this);
						this._ID_Picture = value.ID;
					}
					else
					{
						this._ID_Picture = default(Nullable<int>);
					}
					this.SendPropertyChanged("t_Picture");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_t_Teams(t_Team entity)
		{
			this.SendPropertyChanging();
			entity.t_Pilot = this;
		}
		
		private void detach_t_Teams(t_Team entity)
		{
			this.SendPropertyChanging();
			entity.t_Pilot = null;
		}
		
		private void attach_t_Teams1(t_Team entity)
		{
			this.SendPropertyChanging();
			entity.t_Pilot1 = this;
		}
		
		private void detach_t_Teams1(t_Team entity)
		{
			this.SendPropertyChanging();
			entity.t_Pilot1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.t_Race")]
	public partial class t_Race : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _ID_PenaltyZone;
		
		private System.DateTime _TimeStart;
		
		private System.DateTime _TimeEnd;
		
		private System.DateTime _TakeOff;
		
		private EntitySet<t_Race_Team> _t_Race_Teams;
		
		private EntityRef<t_PenaltyZone> _t_PenaltyZone;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnID_PenaltyZoneChanging(int value);
    partial void OnID_PenaltyZoneChanged();
    partial void OnTimeStartChanging(System.DateTime value);
    partial void OnTimeStartChanged();
    partial void OnTimeEndChanging(System.DateTime value);
    partial void OnTimeEndChanged();
    partial void OnTakeOffChanging(System.DateTime value);
    partial void OnTakeOffChanged();
    #endregion
		
		public t_Race()
		{
			this._t_Race_Teams = new EntitySet<t_Race_Team>(new Action<t_Race_Team>(this.attach_t_Race_Teams), new Action<t_Race_Team>(this.detach_t_Race_Teams));
			this._t_PenaltyZone = default(EntityRef<t_PenaltyZone>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_PenaltyZone", DbType="Int NOT NULL")]
		public int ID_PenaltyZone
		{
			get
			{
				return this._ID_PenaltyZone;
			}
			set
			{
				if ((this._ID_PenaltyZone != value))
				{
					if (this._t_PenaltyZone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_PenaltyZoneChanging(value);
					this.SendPropertyChanging();
					this._ID_PenaltyZone = value;
					this.SendPropertyChanged("ID_PenaltyZone");
					this.OnID_PenaltyZoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStart", DbType="DateTime NOT NULL")]
		public System.DateTime TimeStart
		{
			get
			{
				return this._TimeStart;
			}
			set
			{
				if ((this._TimeStart != value))
				{
					this.OnTimeStartChanging(value);
					this.SendPropertyChanging();
					this._TimeStart = value;
					this.SendPropertyChanged("TimeStart");
					this.OnTimeStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeEnd", DbType="DateTime NOT NULL")]
		public System.DateTime TimeEnd
		{
			get
			{
				return this._TimeEnd;
			}
			set
			{
				if ((this._TimeEnd != value))
				{
					this.OnTimeEndChanging(value);
					this.SendPropertyChanging();
					this._TimeEnd = value;
					this.SendPropertyChanged("TimeEnd");
					this.OnTimeEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TakeOff", DbType="DateTime NOT NULL")]
		public System.DateTime TakeOff
		{
			get
			{
				return this._TakeOff;
			}
			set
			{
				if ((this._TakeOff != value))
				{
					this.OnTakeOffChanging(value);
					this.SendPropertyChanging();
					this._TakeOff = value;
					this.SendPropertyChanged("TakeOff");
					this.OnTakeOffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="t_Race_t_Race_Team", Storage="_t_Race_Teams", ThisKey="ID", OtherKey="ID_Race")]
		public EntitySet<t_Race_Team> t_Race_Teams
		{
			get
			{
				return this._t_Race_Teams;
			}
			set
			{
				this._t_Race_Teams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="t_PenaltyZone_t_Race", Storage="_t_PenaltyZone", ThisKey="ID_PenaltyZone", OtherKey="ID", IsForeignKey=true)]
		public t_PenaltyZone t_PenaltyZone
		{
			get
			{
				return this._t_PenaltyZone.Entity;
			}
			set
			{
				t_PenaltyZone previousValue = this._t_PenaltyZone.Entity;
				if (((previousValue != value) 
							|| (this._t_PenaltyZone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._t_PenaltyZone.Entity = null;
						previousValue.t_Races.Remove(this);
					}
					this._t_PenaltyZone.Entity = value;
					if ((value != null))
					{
						value.t_Races.Add(this);
						this._ID_PenaltyZone = value.ID;
					}
					else
					{
						this._ID_PenaltyZone = default(int);
					}
					this.SendPropertyChanged("t_PenaltyZone");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_t_Race_Teams(t_Race_Team entity)
		{
			this.SendPropertyChanging();
			entity.t_Race = this;
		}
		
		private void detach_t_Race_Teams(t_Race_Team entity)
		{
			this.SendPropertyChanging();
			entity.t_Race = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.t_Race_Team")]
	public partial class t_Race_Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ID_Race;
		
		private int _ID_Team;
		
		private EntityRef<t_Race> _t_Race;
		
		private EntityRef<t_Team> _t_Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnID_RaceChanging(int value);
    partial void OnID_RaceChanged();
    partial void OnID_TeamChanging(int value);
    partial void OnID_TeamChanged();
    #endregion
		
		public t_Race_Team()
		{
			this._t_Race = default(EntityRef<t_Race>);
			this._t_Team = default(EntityRef<t_Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Race", DbType="Int NOT NULL")]
		public int ID_Race
		{
			get
			{
				return this._ID_Race;
			}
			set
			{
				if ((this._ID_Race != value))
				{
					if (this._t_Race.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_RaceChanging(value);
					this.SendPropertyChanging();
					this._ID_Race = value;
					this.SendPropertyChanged("ID_Race");
					this.OnID_RaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Team", DbType="Int NOT NULL")]
		public int ID_Team
		{
			get
			{
				return this._ID_Team;
			}
			set
			{
				if ((this._ID_Team != value))
				{
					if (this._t_Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_TeamChanging(value);
					this.SendPropertyChanging();
					this._ID_Team = value;
					this.SendPropertyChanged("ID_Team");
					this.OnID_TeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="t_Race_t_Race_Team", Storage="_t_Race", ThisKey="ID_Race", OtherKey="ID", IsForeignKey=true)]
		public t_Race t_Race
		{
			get
			{
				return this._t_Race.Entity;
			}
			set
			{
				t_Race previousValue = this._t_Race.Entity;
				if (((previousValue != value) 
							|| (this._t_Race.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._t_Race.Entity = null;
						previousValue.t_Race_Teams.Remove(this);
					}
					this._t_Race.Entity = value;
					if ((value != null))
					{
						value.t_Race_Teams.Add(this);
						this._ID_Race = value.ID;
					}
					else
					{
						this._ID_Race = default(int);
					}
					this.SendPropertyChanged("t_Race");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="t_Team_t_Race_Team", Storage="_t_Team", ThisKey="ID_Team", OtherKey="ID", IsForeignKey=true)]
		public t_Team t_Team
		{
			get
			{
				return this._t_Team.Entity;
			}
			set
			{
				t_Team previousValue = this._t_Team.Entity;
				if (((previousValue != value) 
							|| (this._t_Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._t_Team.Entity = null;
						previousValue.t_Race_Teams.Remove(this);
					}
					this._t_Team.Entity = value;
					if ((value != null))
					{
						value.t_Race_Teams.Add(this);
						this._ID_Team = value.ID;
					}
					else
					{
						this._ID_Team = default(int);
					}
					this.SendPropertyChanged("t_Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.t_Team")]
	public partial class t_Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ID_Pilot;
		
		private System.Nullable<int> _ID_Navigator;
		
		private System.Nullable<int> _ID_Tracker;
		
		private string _Color;
		
		private System.Nullable<int> _ID_Flag;
		
		private EntitySet<t_Race_Team> _t_Race_Teams;
		
		private EntityRef<t_Picture> _t_Picture;
		
		private EntityRef<t_Pilot> _t_Pilot;
		
		private EntityRef<t_Pilot> _t_Pilot1;
		
		private EntityRef<t_Tracker> _t_Tracker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnID_PilotChanging(int value);
    partial void OnID_PilotChanged();
    partial void OnID_NavigatorChanging(System.Nullable<int> value);
    partial void OnID_NavigatorChanged();
    partial void OnID_TrackerChanging(System.Nullable<int> value);
    partial void OnID_TrackerChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnID_FlagChanging(System.Nullable<int> value);
    partial void OnID_FlagChanged();
    #endregion
		
		public t_Team()
		{
			this._t_Race_Teams = new EntitySet<t_Race_Team>(new Action<t_Race_Team>(this.attach_t_Race_Teams), new Action<t_Race_Team>(this.detach_t_Race_Teams));
			this._t_Picture = default(EntityRef<t_Picture>);
			this._t_Pilot = default(EntityRef<t_Pilot>);
			this._t_Pilot1 = default(EntityRef<t_Pilot>);
			this._t_Tracker = default(EntityRef<t_Tracker>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Pilot", DbType="Int NOT NULL")]
		public int ID_Pilot
		{
			get
			{
				return this._ID_Pilot;
			}
			set
			{
				if ((this._ID_Pilot != value))
				{
					if (this._t_Pilot.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_PilotChanging(value);
					this.SendPropertyChanging();
					this._ID_Pilot = value;
					this.SendPropertyChanged("ID_Pilot");
					this.OnID_PilotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Navigator", DbType="Int")]
		public System.Nullable<int> ID_Navigator
		{
			get
			{
				return this._ID_Navigator;
			}
			set
			{
				if ((this._ID_Navigator != value))
				{
					if (this._t_Pilot1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_NavigatorChanging(value);
					this.SendPropertyChanging();
					this._ID_Navigator = value;
					this.SendPropertyChanged("ID_Navigator");
					this.OnID_NavigatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Tracker", DbType="Int")]
		public System.Nullable<int> ID_Tracker
		{
			get
			{
				return this._ID_Tracker;
			}
			set
			{
				if ((this._ID_Tracker != value))
				{
					if (this._t_Tracker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_TrackerChanging(value);
					this.SendPropertyChanging();
					this._ID_Tracker = value;
					this.SendPropertyChanged("ID_Tracker");
					this.OnID_TrackerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="NChar(10)")]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Flag", DbType="Int")]
		public System.Nullable<int> ID_Flag
		{
			get
			{
				return this._ID_Flag;
			}
			set
			{
				if ((this._ID_Flag != value))
				{
					if (this._t_Picture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_FlagChanging(value);
					this.SendPropertyChanging();
					this._ID_Flag = value;
					this.SendPropertyChanged("ID_Flag");
					this.OnID_FlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="t_Team_t_Race_Team", Storage="_t_Race_Teams", ThisKey="ID", OtherKey="ID_Team")]
		public EntitySet<t_Race_Team> t_Race_Teams
		{
			get
			{
				return this._t_Race_Teams;
			}
			set
			{
				this._t_Race_Teams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="t_Picture_t_Team", Storage="_t_Picture", ThisKey="ID_Flag", OtherKey="ID", IsForeignKey=true)]
		public t_Picture t_Picture
		{
			get
			{
				return this._t_Picture.Entity;
			}
			set
			{
				t_Picture previousValue = this._t_Picture.Entity;
				if (((previousValue != value) 
							|| (this._t_Picture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._t_Picture.Entity = null;
						previousValue.t_Teams.Remove(this);
					}
					this._t_Picture.Entity = value;
					if ((value != null))
					{
						value.t_Teams.Add(this);
						this._ID_Flag = value.ID;
					}
					else
					{
						this._ID_Flag = default(Nullable<int>);
					}
					this.SendPropertyChanged("t_Picture");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="t_Pilot_t_Team", Storage="_t_Pilot", ThisKey="ID_Pilot", OtherKey="ID", IsForeignKey=true)]
		public t_Pilot t_Pilot
		{
			get
			{
				return this._t_Pilot.Entity;
			}
			set
			{
				t_Pilot previousValue = this._t_Pilot.Entity;
				if (((previousValue != value) 
							|| (this._t_Pilot.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._t_Pilot.Entity = null;
						previousValue.t_Teams.Remove(this);
					}
					this._t_Pilot.Entity = value;
					if ((value != null))
					{
						value.t_Teams.Add(this);
						this._ID_Pilot = value.ID;
					}
					else
					{
						this._ID_Pilot = default(int);
					}
					this.SendPropertyChanged("t_Pilot");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="t_Pilot_t_Team1", Storage="_t_Pilot1", ThisKey="ID_Navigator", OtherKey="ID", IsForeignKey=true)]
		public t_Pilot t_Pilot1
		{
			get
			{
				return this._t_Pilot1.Entity;
			}
			set
			{
				t_Pilot previousValue = this._t_Pilot1.Entity;
				if (((previousValue != value) 
							|| (this._t_Pilot1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._t_Pilot1.Entity = null;
						previousValue.t_Teams1.Remove(this);
					}
					this._t_Pilot1.Entity = value;
					if ((value != null))
					{
						value.t_Teams1.Add(this);
						this._ID_Navigator = value.ID;
					}
					else
					{
						this._ID_Navigator = default(Nullable<int>);
					}
					this.SendPropertyChanged("t_Pilot1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="t_Tracker_t_Team", Storage="_t_Tracker", ThisKey="ID_Tracker", OtherKey="ID", IsForeignKey=true)]
		public t_Tracker t_Tracker
		{
			get
			{
				return this._t_Tracker.Entity;
			}
			set
			{
				t_Tracker previousValue = this._t_Tracker.Entity;
				if (((previousValue != value) 
							|| (this._t_Tracker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._t_Tracker.Entity = null;
						previousValue.t_Teams.Remove(this);
					}
					this._t_Tracker.Entity = value;
					if ((value != null))
					{
						value.t_Teams.Add(this);
						this._ID_Tracker = value.ID;
					}
					else
					{
						this._ID_Tracker = default(Nullable<int>);
					}
					this.SendPropertyChanged("t_Tracker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_t_Race_Teams(t_Race_Team entity)
		{
			this.SendPropertyChanging();
			entity.t_Team = this;
		}
		
		private void detach_t_Race_Teams(t_Race_Team entity)
		{
			this.SendPropertyChanging();
			entity.t_Team = null;
		}
	}
}
#pragma warning restore 1591
